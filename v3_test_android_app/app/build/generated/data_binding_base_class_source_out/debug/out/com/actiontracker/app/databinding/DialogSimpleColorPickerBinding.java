// Generated by view binder compiler. Do not edit!
package com.actiontracker.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.actiontracker.app.R;
import com.actiontracker.app.ui.ColorPaletteView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogSimpleColorPickerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button applyCustomColorButton;

  @NonNull
  public final SeekBar blueSeekBar;

  @NonNull
  public final GridLayout colorButtonsGrid;

  @NonNull
  public final ColorPaletteView colorPaletteView;

  @NonNull
  public final View colorPreview;

  @NonNull
  public final SeekBar greenSeekBar;

  @NonNull
  public final GridLayout rainbowColorsGrid;

  @NonNull
  public final SeekBar redSeekBar;

  private DialogSimpleColorPickerBinding(@NonNull LinearLayout rootView,
      @NonNull Button applyCustomColorButton, @NonNull SeekBar blueSeekBar,
      @NonNull GridLayout colorButtonsGrid, @NonNull ColorPaletteView colorPaletteView,
      @NonNull View colorPreview, @NonNull SeekBar greenSeekBar,
      @NonNull GridLayout rainbowColorsGrid, @NonNull SeekBar redSeekBar) {
    this.rootView = rootView;
    this.applyCustomColorButton = applyCustomColorButton;
    this.blueSeekBar = blueSeekBar;
    this.colorButtonsGrid = colorButtonsGrid;
    this.colorPaletteView = colorPaletteView;
    this.colorPreview = colorPreview;
    this.greenSeekBar = greenSeekBar;
    this.rainbowColorsGrid = rainbowColorsGrid;
    this.redSeekBar = redSeekBar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogSimpleColorPickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogSimpleColorPickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_simple_color_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogSimpleColorPickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.applyCustomColorButton;
      Button applyCustomColorButton = ViewBindings.findChildViewById(rootView, id);
      if (applyCustomColorButton == null) {
        break missingId;
      }

      id = R.id.blueSeekBar;
      SeekBar blueSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (blueSeekBar == null) {
        break missingId;
      }

      id = R.id.colorButtonsGrid;
      GridLayout colorButtonsGrid = ViewBindings.findChildViewById(rootView, id);
      if (colorButtonsGrid == null) {
        break missingId;
      }

      id = R.id.colorPaletteView;
      ColorPaletteView colorPaletteView = ViewBindings.findChildViewById(rootView, id);
      if (colorPaletteView == null) {
        break missingId;
      }

      id = R.id.colorPreview;
      View colorPreview = ViewBindings.findChildViewById(rootView, id);
      if (colorPreview == null) {
        break missingId;
      }

      id = R.id.greenSeekBar;
      SeekBar greenSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (greenSeekBar == null) {
        break missingId;
      }

      id = R.id.rainbowColorsGrid;
      GridLayout rainbowColorsGrid = ViewBindings.findChildViewById(rootView, id);
      if (rainbowColorsGrid == null) {
        break missingId;
      }

      id = R.id.redSeekBar;
      SeekBar redSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (redSeekBar == null) {
        break missingId;
      }

      return new DialogSimpleColorPickerBinding((LinearLayout) rootView, applyCustomColorButton,
          blueSeekBar, colorButtonsGrid, colorPaletteView, colorPreview, greenSeekBar,
          rainbowColorsGrid, redSeekBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
