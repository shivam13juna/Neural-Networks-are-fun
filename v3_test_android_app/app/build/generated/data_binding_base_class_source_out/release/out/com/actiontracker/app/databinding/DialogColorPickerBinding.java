// Generated by view binder compiler. Do not edit!
package com.actiontracker.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.actiontracker.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogColorPickerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button colorBlue;

  @NonNull
  public final Button colorCyan;

  @NonNull
  public final Button colorDeepPurple;

  @NonNull
  public final Button colorGreen;

  @NonNull
  public final Button colorIndigo;

  @NonNull
  public final Button colorLightBlue;

  @NonNull
  public final Button colorPink;

  @NonNull
  public final Button colorPurple;

  @NonNull
  public final Button colorRed;

  @NonNull
  public final Button colorTeal;

  @NonNull
  public final Button colorWhite;

  @NonNull
  public final Button colorYellow;

  private DialogColorPickerBinding(@NonNull LinearLayout rootView, @NonNull Button colorBlue,
      @NonNull Button colorCyan, @NonNull Button colorDeepPurple, @NonNull Button colorGreen,
      @NonNull Button colorIndigo, @NonNull Button colorLightBlue, @NonNull Button colorPink,
      @NonNull Button colorPurple, @NonNull Button colorRed, @NonNull Button colorTeal,
      @NonNull Button colorWhite, @NonNull Button colorYellow) {
    this.rootView = rootView;
    this.colorBlue = colorBlue;
    this.colorCyan = colorCyan;
    this.colorDeepPurple = colorDeepPurple;
    this.colorGreen = colorGreen;
    this.colorIndigo = colorIndigo;
    this.colorLightBlue = colorLightBlue;
    this.colorPink = colorPink;
    this.colorPurple = colorPurple;
    this.colorRed = colorRed;
    this.colorTeal = colorTeal;
    this.colorWhite = colorWhite;
    this.colorYellow = colorYellow;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogColorPickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogColorPickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_color_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogColorPickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.color_blue;
      Button colorBlue = ViewBindings.findChildViewById(rootView, id);
      if (colorBlue == null) {
        break missingId;
      }

      id = R.id.color_cyan;
      Button colorCyan = ViewBindings.findChildViewById(rootView, id);
      if (colorCyan == null) {
        break missingId;
      }

      id = R.id.color_deep_purple;
      Button colorDeepPurple = ViewBindings.findChildViewById(rootView, id);
      if (colorDeepPurple == null) {
        break missingId;
      }

      id = R.id.color_green;
      Button colorGreen = ViewBindings.findChildViewById(rootView, id);
      if (colorGreen == null) {
        break missingId;
      }

      id = R.id.color_indigo;
      Button colorIndigo = ViewBindings.findChildViewById(rootView, id);
      if (colorIndigo == null) {
        break missingId;
      }

      id = R.id.color_light_blue;
      Button colorLightBlue = ViewBindings.findChildViewById(rootView, id);
      if (colorLightBlue == null) {
        break missingId;
      }

      id = R.id.color_pink;
      Button colorPink = ViewBindings.findChildViewById(rootView, id);
      if (colorPink == null) {
        break missingId;
      }

      id = R.id.color_purple;
      Button colorPurple = ViewBindings.findChildViewById(rootView, id);
      if (colorPurple == null) {
        break missingId;
      }

      id = R.id.color_red;
      Button colorRed = ViewBindings.findChildViewById(rootView, id);
      if (colorRed == null) {
        break missingId;
      }

      id = R.id.color_teal;
      Button colorTeal = ViewBindings.findChildViewById(rootView, id);
      if (colorTeal == null) {
        break missingId;
      }

      id = R.id.color_white;
      Button colorWhite = ViewBindings.findChildViewById(rootView, id);
      if (colorWhite == null) {
        break missingId;
      }

      id = R.id.color_yellow;
      Button colorYellow = ViewBindings.findChildViewById(rootView, id);
      if (colorYellow == null) {
        break missingId;
      }

      return new DialogColorPickerBinding((LinearLayout) rootView, colorBlue, colorCyan,
          colorDeepPurple, colorGreen, colorIndigo, colorLightBlue, colorPink, colorPurple,
          colorRed, colorTeal, colorWhite, colorYellow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
